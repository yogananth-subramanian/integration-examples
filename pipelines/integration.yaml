apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: integration-test-app
spec:
  description: >-
    Expects a Snapshot of a simple application with endpoint containing the expected output to be deployed on an environment. 
    A secret containing the kubeconfig for the environment needs to be mounted via the cluster-credentials workspace binding.
    The route to the single component is expected to have the same name as the component (default appstudio behavior).
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: 'Namespace where the application is running'
      name: NAMESPACE
      default: "default"
      type: string
    - description: 'Expected output'
      name: EXPECTED_OUTPUT
      default: "Hello World"
      type: string
    - description: 'Application endpoint port'
      name: PORT
      default: ""
      type: string     
  tasks:
    - name: example-sidecar      
      taskSpec:
        steps:
          - image: quay.io/redhat-appstudio/hacbs-test:latest
            env:
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
              - name: NAMESPACE
                value: $(params.NAMESPACE)
              - name: EXPECTED_OUTPUT
                value: $(params.EXPECTED_OUTPUT)
              - name: PORT
                value: $(params.PORT)
            script: |
              #!/usr/bin/env bash
              export KUBECONFIG=$(workspaces.cluster-credentials.path)/kubeconfig
              
              # Get the route for the application endpoint
              COMPONENT_NAME=$(echo -n ${SNAPSHOT} | jq -r .components[0].name)
              # The --insecure-skip-tls-verify option is added for local testing
              # when the clusters only have self-signed certificates. 
              # This option should not be used in production.
              ROUTE_NAME=$(oc get routes -l app.kubernetes.io/name="${COMPONENT_NAME}" -o name --insecure-skip-tls-verify)
              HOST=$(oc get "${ROUTE_NAME}" -o jsonpath={.spec.host} -n "${NAMESPACE}" --insecure-skip-tls-verify)
              echo "Found target host ${HOST} for app ${APPLICATION_NAME}"
              
              # Check the application endpoint
              ENDPOINT_OUTPUT=$(curl -k https://${HOST}:${PORT})
              echo -e "The endpoint outputs the following:\n ${ENDPOINT_OUTPUT}"
              echo -e "Expected endpoint output:\n ${EXPECTED_OUTPUT}"
              echo -e "Snapshot output:\n ${SNAPSHOT}"
              echo ${ENDPOINT_OUTPUT} > $(workspaces.cluster-credentials.path)/endpoint_url
              if [[ "${ENDPOINT_OUTPUT}" == "${EXPECTED_OUTPUT}" ]]; then
                RESULT="SUCCESS"
              else
                RESULT="FAILURE"
              fi

              TEST_OUTPUT=$(jq -rc --arg date $(date +%s) --arg RESULT "${RESULT}" --null-input \
                '{result: $RESULT, timestamp: $date, failures: 0, successes: 0, warnings: 0}')
              echo -n "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)
              echo -e "${SNAPSHOT}"
              echo -e "${NAMESPACE}"          
      workspaces:
      - name: cluster-credentials
    - name:  test-output
      taskSpec:
        steps:
        - image: docker.io/dwdraju/alpine-curl-jq
          script: |
            echo "Hello example-push-task!"
            cat $(workspaces.cluster-credentials.path)/endpoint_url
      runAfter:
        - example-sidecar
      workspaces:
      - name: cluster-credentials                 
 workspaces:
    - name: cluster-credentials
      optional: true      
