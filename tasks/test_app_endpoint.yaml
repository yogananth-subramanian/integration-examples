apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: test-app-endpoint
spec:
  description: >-
    Expects an Snapshot deployed.
  params:
    - name: SNAPSHOT
      description: Expected output of the application endpoint
    - default: 'default'
      name: NAMESPACE
      description: Namespace of the application under test
    - default: "Hello World"
      name: EXPECTED_OUTPUT
      description: Expected output of the application endpoint
    - default: ""
      name: PORT
      description: Application endpoint Port
  results:
    - name: TEST_OUTPUT
      description: Test output
  steps:
    - image: quay.io/redhat-appstudio/hacbs-test:latest
      env:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
        - name: EXPECTED_OUTPUT
          value: $(params.EXPECTED_OUTPUT)
        - name: PORT
          value: $(params.PORT)
      script: |
        #!/usr/bin/env bash
        export KUBECONFIG=$(workspaces.cluster-credentials.path)/kubeconfig

        # Get the route for the application endpoint
        COMPONENT_NAME=$(echo -n ${SNAPSHOT} | jq -r .components[0].name)
        # The --insecure-skip-tls-verify option is added for local testing
        # when the clusters only have self-signed certificates.
        # This option should not be used in production.
        ROUTE_NAME=$(oc get routes -l app.kubernetes.io/name="${COMPONENT_NAME}" -o name --insecure-skip-tls-verify)
        HOST=$(oc get "${ROUTE_NAME}" -o jsonpath={.spec.host} -n "${NAMESPACE}" --insecure-skip-tls-verify)
        echo "Found target host ${HOST} for app ${APPLICATION_NAME}"
        oc whoami --insecure-skip-tls-verify
        oc auth can-i --list --namespace=openshift-monitoring --insecure-skip-tls-verify
        echo -e "the project is"
        echo -e "${SNAPSHOT}"
        echo -e "${NAMESPACE}"
        oc project --short
        oc auth can-i --list --namespace=`oc project --short` --insecure-skip-tls-verify        
        oc get deployments --show-labels
        oc get pvc
        oc scale --replicas=3 deployment -l app.kubernetes.io/part-of=devfile-sample-1
        oc get pods
        oc get pods  -o yaml |grep  -A6 resources
        
        # Check the application endpoint
        ENDPOINT_OUTPUT=$(curl -k http://${HOST}:${PORT})
        echo -e "The endpoint outputs the following:\n ${ENDPOINT_OUTPUT}"
        echo -e "Expected endpoint output:\n ${EXPECTED_OUTPUT}"
        echo -e "Snapshot output:\n ${SNAPSHOT}"
        echo ${HOST} > /tekton/home/endpoint_url
        if [[ "${ENDPOINT_OUTPUT}" == "${EXPECTED_OUTPUT}" ]]; then
          RESULT="SUCCESS"
        else
          RESULT="FAILURE"
        fi

        TEST_OUTPUT=$(jq -rc --arg date $(date +%s) --arg RESULT "${RESULT}" --null-input \
          '{result: $RESULT, timestamp: $date, failures: 0, successes: 0, warnings: 0}')
        echo -n "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)
        echo -e "${SNAPSHOT}"
        echo -e "${NAMESPACE}"
    - image: docker.io/dwdraju/alpine-curl-jq
      script: |
        echo "Hello example-push-task!"
        cat /tekton/home/endpoint_url
  workspaces:
    - name: cluster-credentials
      optional: true
