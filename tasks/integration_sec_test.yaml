apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: integration-test-app
spec:
  description: >-
    Expects a Snapshot of a simple application with endpoint containing the expected output to be deployed on an environment. 
    A secret containing the kubeconfig for the environment needs to be mounted via the cluster-credentials workspace binding.
    The route to the single component is expected to have the same name as the component (default appstudio behavior).
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: 'Namespace where the application is running'
      name: NAMESPACE
      default: "default"
      type: string
    - description: 'Application endpoint port'
      name: PORT
      default: ""
      type: string
    - description: 'Horreum Test Name'
      name: HR_TEST_NAME
      default: ""
      type: string      
    - description: 'Horreum regression variable'
      name: HR_REG_VAR
      default: ""
      type: string        
  tasks:  
    - name: extract-metadata
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
        - name: PORT
          value: $(params.PORT)
        - name: HR_TEST_NAME
          value: $(params.HR_TEST_NAME)          
        - name: HR_REG_VAR
          value: $(params.HR_REG_VAR)          
      workspaces:
        - name: cluster-credentials
          workspace: cluster-credentials      
      taskSpec:
        params:
          - name: SNAPSHOT
            description: Expected output of the application endpoint
          - default: 'default'
            name: NAMESPACE
            description: Namespace of the application under test
          - default: ""
            name: PORT
            description: Application endpoint Port
          - name: HR_TEST_NAME
            description: 'Horreum Test Name'            
          - name: HR_REG_VAR
            description: 'Horreum regression variable'            
        results:
          - name: APP_URL
            description: APP URL
          - name: test_name
            description: Test name
          - name: reg_var
            description: Regression variable             
          - name: TEST_OUTPUT
            description: Test output             
        workspaces:
          - name: cluster-credentials
            optional: true                
        steps:
        - image: quay.io/redhat-appstudio/hacbs-test:latest
          env:
            - name: SNAPSHOT
              value: $(params.SNAPSHOT)
            - name: NAMESPACE
              value: $(params.NAMESPACE)
            - name: PORT
              value: $(params.PORT)        
          script: |
            #!/usr/bin/env bash
            export KUBECONFIG=$(workspaces.cluster-credentials.path)/kubeconfig

            # Get the route for the application endpoint
            COMPONENT_NAME=$(echo -n ${SNAPSHOT} | jq -r .components[0].name)
            # The --insecure-skip-tls-verify option is added for local testing
            # when the clusters only have self-signed certificates.
            # This option should not be used in production.
            ROUTE_NAME=$(oc get routes -l app.kubernetes.io/name="${COMPONENT_NAME}" -o name --insecure-skip-tls-verify)
            HOST=$(oc get "${ROUTE_NAME}" -o jsonpath={.spec.host} -n "${NAMESPACE}" --insecure-skip-tls-verify)
            echo "Found target host ${HOST} for app ${APPLICATION_NAME}"

            cat << EOF > /tmp/sec.yaml
            kind: NetworkPolicy
            apiVersion: networking.k8s.io/v1
            metadata:
              name: default-deny-all-egress
            spec:
              policyTypes:
              - Egress
              - Ingress
              podSelector: {}
              egress: []
              ingress: []            
            EOF
            oc create -f /tmp/sec.yaml
            oc get networkpolicy
            oc get pods --show-labels
            oc delete -f /tmp/sec.yaml
            oc get networkpolicy 
            oc delete pod -l io.kompose.service=trex-db
            oc get pods
            # Check the application endpoint
            ENDPOINT_OUTPUT=$(curl -k http://${HOST}:${PORT})
            echo -e "The endpoint outputs the following:\n ${ENDPOINT_OUTPUT}"
            echo -e "Snapshot output:\n ${SNAPSHOT}"

            echo ${HOST} > /tekton/home/endpoint_url            
            echo -n ${HOST} | tee $(results.APP_URL.path)
            if [ -z $(params.HR_TEST_NAME) ]
            then
              echo '$(params.SNAPSHOT)'|jq -r .components[].name |  tr -d '\n\t' | tee $(results.test_name.path)
            else
              echo -n  '$(params.HR_TEST_NAME)' | tee $(results.test_name.path)
            fi            
            
            if [ -z $(params.HR_REG_VAR) ]
            then
              echo -n 'iteration_duration' | tee $(results.reg_var.path)
            else
              echo -n '$(params.HR_REG_VAR)' | tee $(results.reg_var.path)
            fi             
    - name: perf-benchmark
      params:
        - name: url
          value: $(tasks.extract-metadata.results.APP_URL)
        - name: test_name
          value: $(tasks.extract-metadata.results.test_name)
        - name: reg_var
          value: $(tasks.extract-metadata.results.reg_var)           
      taskSpec:
        params:
          - name: url
          - name: test_name
          - name: reg_var          
        steps:
        - image: quay.io/yogananth_subramanian/curl-yq-jq
          name: check-regression
          env:
            - name: HORREUM_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: horreum
                  key: horreum_password
            - name: HORREUM_URI
              valueFrom:
                secretKeyRef:
                  name: horreum
                  key: horreum_uri
            - name: HORREUM_USER
              valueFrom:
                secretKeyRef:
                  name: horreum
                  key: horreum_user
            - name: OCM_TOKEN
              valueFrom:
                secretKeyRef:
                  name: ocm
                  key: ocmtoken                    
          script: |
            set -xv
            echo "Transform result to json format"
            wget -O /tmp/ocm https://github.com/openshift-online/ocm-cli/releases/download/v0.1.65/ocm-linux-amd64
            chmod +x /tmp/ocm
            echo ${OCM_TOKEN}
            /tmp/ocm login --token=${OCM_TOKEN} --url=http://$(params.url)
            export BASE_URL=http://$(params.url)            
            curl -v -m 10  ${BASE_URL}/api/rh-trex/v1/dinosaurs/ -H "Authorization: Bearer `/tmp/ocm token`"
      runAfter:
        - extract-metadata
  finally:
    - name: cleanup  
      params:
        - name: aggregateTasksStatus
          value: "$(tasks.status)"	
      taskSpec:
        results:
          - name: TEST_OUTPUT
        params:
          - name: aggregateTasksStatus
        steps:
        - image: quay.io/yogananth_subramanian/curl-yq-jq  
          name: step1
          script: |
            RESULT="SUCCESS"
            if [ $(params.aggregateTasksStatus) == "Failed" ]
            then
              RESULT="FAILURE"
            fi
            TEST_OUTPUT=$(jq -rc --arg date $(date +%s) --arg RESULT "${RESULT}" --null-input \
            '{result: $RESULT, timestamp: $date, failures: 0, successes: 0, warnings: 0}')
            echo -n "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)        
  workspaces:
    - name: cluster-credentials
      optional: true
